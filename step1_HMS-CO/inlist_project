&binary_job

!!! output/input files
   inlist_names(1) = 'inlist1'  ! load inlist1 for star 1; default: 'inlist1' |
   inlist_names(2) = 'inlist2'  ! load inlist2 for star 2; default: 'inlist2' |

!!! starting model
   evolve_both_stars = .false.  ! define if both stars are evolved or only star 1, while star 2 is treated as a point mass; default: .false. | star2 is a compact object

/ ! end of binary_job namelist

&binary_controls

!!! starting model
   m1 = 12.0d0                          ! mass of star 1;       default: 1.0d0 |
   m2 = 1.4d0                           ! mass of star 2;       default: 0.8d0 |
   initial_period_in_days = -1d0        ! initial period;       default: 0.5d0 | do not use initial orbital period instead use initial separation
   initial_separation_in_Rsuns = 972d0  ! initial separation;   default: 100   |
   initial_eccentricity = 0.0d0         ! initial eccentricity; default: 0.0d0 | circular

!!! output controls
   history_interval = 1                           ! interval for writing to binary history;                                   default: 5      | save all steps in history
   append_to_star_history = .true.                ! define whether the binary history is appended to the star's history, too; default: .true. | allows to plot stellar and binary data from same file
   photo_interval = 50                            ! interval for writing photos;                                              default: 50     | overwrites value in inlist of the components
   photo_digits = 5                               ! number of digits in photo's filename;                                     default: 3      | overwrites value in inlist of the components
   terminal_interval = 10                         ! interval for terminal outputs;                                            default: 1      | get less outputs
   write_header_frequency = 10                    ! frequency to repeat the header every X outputs;                           default: 10     |
   extra_binary_terminal_output_file = 'out.txt'  ! writes terminal output to this file, too;                                 default: ''     | save terminal output in file

!!! timestep controls (hard limits causes retry)
   fm = 5d-3                    ! expected relative change in envelope mass;                          default: 1d-2 | 
  !fm_hard = -1d0               ! hard limit on relative change in envelope mass;                     default: -1d0 | negative: no hard limit
   fa = 5d-3                    ! expected relative change in binary separation;                      default: 1d-2 | 
   fa_hard = 1d-2               ! hard limit on relative change in binary separation;                 default: 2d-2 | negative: no hard limit
   fr = 1d-2                    ! expected relative change in (r-rl)/rl;                              default: 1d-1 | 
  !fr_hard = -1d0               ! hard limit on relative change in (r-rl)/rl;                         default: -1d0 | negative: no hard limit
   fj = 8d-3                    ! expected relative change in orbital angular momentum;               default: 1d-3 | 
   fj_hard = 1d-2               ! hard limit on relative change in orbital angular momentum;          default: 1d-2 | negative: no hard limit
   fe = 0.01d0                  ! expected relative change in orbital eccentricity;                   default: 1d-2 | 
  !fe_hard = -1d0               ! hard limit on relative change in orbital eccentricity;              default: -1d0 | negative: no hard limit
   fm_limit = 1d-3              ! minimum absolute envelope mass to determine the next timestep;      default: 1d-3 |
   fr_limit = 1d-2              ! minimum absolute value of (r-rl)/rl to determine the next timestep; default: 1d-2 |
   fe_limit = 1d-1              ! minimum absolute eccentricity to determine the next timestep;       default: 1d-1 |
   fr_dt_limit = 5d2            ! lower limit for fr control;                                         default: 1d1  | in years
   dt_softening_factor = 0.4d0  ! softening of timestep changes;                                      default: 5d-1 |

!!! when to stop
   accretor_overflow_terminate = 100d0  ! terminate if accretor overfills its Roche-lobe; default: 0.0d0   | extreme overfilling
   terminate_if_L2_overflow = .false.   ! check for L2 overflow;                          default: .false. | L2 oveflow check changes between Marchant et al. 2016 and Misra et al. 2020 for MS or postMS star respectively, in run_binary_extras.f

!!! mass transfer controls (mass transfer is assumed by default as a base conservative, but is capped further in run_binary_extras)
   mass_transfer_alpha = 0d0              ! fraction of mass lost from the vicinity of donor as fast wind;                           default: 0.0d0    | no additional wind loss
   mass_transfer_beta = 0d0               ! fraction of mass lost from the vicinity of accretor as fast wind;                        default: 0.0d0    | no direct loss from accretor
   mass_transfer_gamma = 0d0              ! radius of the circumbinary coplanar toroid;                                              default: 0.0d0    | no toroid size
   mass_transfer_delta = 0d0              ! fraction of mass lost from circumbinary coplanar toroid;                                 default: 0.0d0    | no transfer to toroid
   limit_retention_by_mdot_edd = .false.  ! Eddington limited accretion;                                                             default: .false.  | turned-on for accretion onto compact objects in run_binary_extras
   mdot_scheme = "contact"                ! mass transfer scheme;                                                                    default: 'Ritter' | 'contact' switches to 'Kolb' after one of the two stars reaches TAMS
   max_tries_to_achieve = 200             ! maximum number of tries to converge on and implicit mass transfer;                       default: 20       |
   implicit_scheme_tolerance = 1d-4       ! required accuracy to accept the mass transfer rate;                                      default: 1d-2     |
   initial_change_factor = 1.2d0          ! initial change factor;                                                                   default: 1.5d0    |
   change_factor_fraction = 0.8d0         ! fraction of considdered relative difference in mass-transfer rate to its previous value; default: 0.9d0    |
   implicit_lambda = 0.4d0                ! fraction of changing the change factor;                                                  default: 0.25d0   |
   max_change_factor = 1.2d0              ! maximum change factor;                                                                   default: 1.5d0    |
   min_change_factor = 1.01d0             ! minimum change factor;                                                                   default: 1.05d0   |
   roche_min_mdot = 1d-10                 ! limit to stop mass transfer;                                                             default: 1d-16    |
   min_mdot_for_implicit = 1d-9           ! use implicite scheme above this mass-transfer rate;                                      default: 1d-16    |
  !report_rlo_solver_progress = .false.   ! for debugging the mass transfer;                                                         default: .false.  |

!!! orbital jdot controls
   do_jdot_missing_wind = .true.  ! wind correction for mass transfer; default: .false. | adopt orbital angular momentum by accounting for missing wind
   do_jdot_mb = .false.           ! enables magnetic breaking;         default: .true.  | no magnetic breaking

!!! rotation and sync controls
   do_j_accretion = .true.              ! enable to calculate angular momentum of accreted material; default: .false.    | according to De Mink et al. 2013
   do_tidal_sync = .true.               ! enable tidal torque;                                       default: .false.    | tides are on
   sync_type_1 = "structure_dependent"  ! syncronisation of star 1;                                  default: 'Hut_conv' | "structure_dependent": it calculates both timescales for "Hut_rad" (assuming all star radiative) and "Hut_conv" (for the most important convective layer in the envelope) and picks the shortest one.
  !sync_type_2 = "structure_dependent"  ! syncronisation of star 2;                                  default: 'Hut_conv' | "structure_dependent": it calculates both timescales for "Hut_rad" (assuming all star radiative) and "Hut_conv" (for the most important convective layer in the envelope) and picks the shortest one.
   do_initial_orbit_sync_1 = .true.     ! equal initial orbital and stellar spin period;             default: .false.    | start synchronized
  !do_initial_orbit_sync_2 = .true.     ! equal initial orbital and stellar spin period;             default: .false.    | start synchronized

!!! eccentricity controls
  !do_tidal_circ = .true.               ! tidal circularization of the orbit; default: .false.    | tides are on
  !circ_type_1 = "structure_dependent"  ! circularization by star 1;          default: 'Hut_conv' | "structure_dependent": it calculates both timescales for "Hut_rad" (assuming all star radiative) and "Hut_conv" (for the most important convective layer in the envelope) and picks the shortest one.
  !circ_type_2 = "structure_dependent"  ! circularization by star 2;          default: 'Hut_conv' | "structure_dependent": it calculates both timescales for "Hut_rad" (assuming all star radiative) and "Hut_conv" (for the most important convective layer in the envelope) and picks the shortest one.

!!! hooks
   use_other_tsync = .true.               ! enable other syncronization;      default: .false. | tidal timescale calculation
   use_other_sync_spin_to_orbit = .true.  ! enable other spin syncronization; default: .false. | we decide where to apply the tides. Calls the tidal timescale calculation

/ ! end of binary_controls namelist
